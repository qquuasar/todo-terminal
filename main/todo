#!/usr/bin/env python3

import argparse
import json
import os
from pathlib import Path

DATA_FILE = Path.home() / '.todo.json'

def load_tasks():
    if DATA_FILE.exists():
        with open(DATA_FILE,'r') as f:
            return json.load(f)
    return []

def save_tasks(tasks):
    with open(DATA_FILE,'w') as f:
        json.dump(tasks, f, indent=2)

def add_task(text,tags):
    tasks = load_tasks()
    task = {
            "id": len(tasks) + 1,
            "text": text,
            "done": False,
            "tags": tags
            }
    tasks.append(task)
    save_tasks(tasks)
    print(f"[V] Added task: {text}, with tags: {tags}")

def list_tasks(filter_tag=None):
    tasks = load_tasks()
    filtered = tasks
    if filter_tag:
        filtered = [t for t in tasks if filter_tag in t.get("tags", [])]
    for task in filtered:
        status = "✔" if task["done"] else "✘"
        tags_str = ", ".join(task.get("tags", []))
        print(f"{task['id']}.[{status}] {task["text"]} (Tags: {tags_str})")



def mark_done(index):
    tasks = load_tasks()
    try:
        tasks[index - 1]["done"] = True
        save_tasks(tasks)
        print(f"[✓] Done: {tasks[index-1]["text"]}")
    except IndexError:
        print("No entries for this task")

def remove_task(index):
    tasks = load_tasks()
    try:
        removed = tasks.pop(index - 1)
        save_tasks(tasks)
        print(f"[-] Removed: {removed["text"]}")
    except IndexError:
        print("No entries for this task")

def main():
    parser = argparse.ArgumentParser(description="TODO in terminal")
    subparsers = parser.add_subparsers(dest='command')

    add = subparsers.add_parser('add', help='Add task')
    add.add_argument('text',help='Task name')
    add.add_argument('--tag', nargs='*', default=[], help='Task tags')

    list_parser = subparsers.add_parser('list', help='Show task list')
    list_parser.add_argument('--tag', help = "Filter by tag")

    done = subparsers.add_parser('done',help="Mark as done")
    done.add_argument('id',type=int)

    rm = subparsers.add_parser('rm', help='Remove task')
    rm.add_argument('id',type=int)

    args = parser.parse_args()

    if args.command == 'add':
        add_task(args.text, args.tag)
    elif args.command == 'list':
        list_tasks(args.tag)
    elif args.command == 'done':
        mark_done(args.id)
    elif args.command == 'rm':
        remove_task(args.id)
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
